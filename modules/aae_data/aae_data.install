<?php

/**
 * @file aae_data.install
 * Installiert alles, was unser AAE Data Modul benötigt.
 */

/**
 * Implements hook_schema().
 * Legt bei Installation DB-Tabellen an,
 * welche automatisch bei Deinstallation wieder entfernt werden.
 */
function aae_data_schema() {
  $schema = array();
  $schema ['aae_data_bezirke'] = array(
  'description' => 'Tabelle fuer Leipziger Bezirke',
	'fields' => array(
	  'BID' => array('description' => 'ID für Bezirke', 'type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
	  'bezirksname' => array('description' => 'Bezirksname', 'type' => 'varchar', 'length' => 100, 'not null' => TRUE),
	),
	'primary key' => array('BID'),
  );
  $schema ['aae_data_akteur'] = array(
  'description' => 'Tabelle für Akteure',
	'fields' => array(
    'AID' => array('description' => 'ID für Akteur', 'type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
	  'name' => array('description' => 'Name des Akteurs/der Organisation', 'type' => 'varchar', 'length' => 64, 'not null' => TRUE),
	  'email' => array('description' => 'Email Adresse zur Kontaktaufnahme', 'type' => 'varchar', 'length' => 100, 'not null' => TRUE, 'default' => ''),
	  'telefon' => array('description' => 'Telefonnummer zur Kontaktaufnahme', 'type' => 'varchar', 'length' => 100, 'not null' => FALSE, 'default' => ''),
	  'url' => array('description' => 'Link zur eigenen Homepage', 'type' => 'varchar', 'length' => 100, 'not null' => FALSE, 'default' => ''),
	  'ansprechpartner' => array('description' => 'Öffentlicher Ansprechpartner', 'type' => 'varchar', 'length' => 100, 'not null' => FALSE, 'default' => ''),
	  'funktion' => array('description' => 'Funktion des Ansprechpartners', 'type' => 'varchar', 'length' => 100, 'not null' => FALSE, 'default' => ''),
	  'bild' => array('description' => 'Pfad zum hinterlegten Bild', 'type' => 'varchar', 'length' => 400, 'not null' => FALSE, 'default' => ''),
	  'beschreibung' => array('description' => 'Kurzbeschreibung für Übersicht', 'type' => 'text', 'length' => 'medium', 'not null' => FALSE, 'default' => ''),
	  'oeffnungszeiten' => array('description' => 'Wann der Akteur erreichbar ist', 'type' => 'varchar', 'length' => 200, 'not null' => FALSE, 'default' => ''),
	  'adresse' => array('description' => 'Verweis auf Adresse', 'type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE, 'default' => ''),
	  'barrierefrei' => array('description' => 'Barrierefreier Zugang?', 'type' => 'int', 'size' => 'tiny', 'not null' => FALSE, 'default' => ''),
    'ersteller' => array('description' => 'ID von User, der Akteur angelegt hat', 'type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE, 'default' => 0),
    'created' => array( 'type' => 'datetime', 'mysql_type' => 'datetime', 'not null' => FALSE, 'description' => 'Created als Timestamp'),
    'modified' => array( 'type' => 'datetime', 'mysql_type' => 'datetime', 'not null' => FALSE, 'description' => 'Modified als Timestamp')
	),
	'primary key' => array('AID'),
	'foreign keys' => array(
	  'Akteursadresse' => array('table' => 'aae_data_adresse', 'columns' => array('adresse' => 'ADID')),
	  'User' => array('table' => 'user', 'columns' => array('ersteller' => 'uid'))
	)
  );
  $schema ['aae_data_adresse'] = array(
  'description' => 'Table for Adresses',
	'fields' => array(
	  'ADID' => array('description' => 'ID für Adressen', 'type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
	  'strasse' => array('description' => 'Straßenname', 'type' => 'varchar', 'length' => 64, 'not null' => FALSE, 'default' => ''),
	  'adresszusatz' => array('description' => 'Adresszusatz wie Hinterhof oder a', 'type' => 'varchar', 'length' => 100, 'not null' => FALSE, 'default' => ''),
	  'bezirk' => array('description' => 'Bezirk', 'type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE, 'default' => 0),
	  'nr' => array('description' => 'Hausnummer', 'type' => 'varchar', 'length' => 8, 'not null' => FALSE, 'default' => ''),
	  'plz' => array('description' => 'Postleitzahl', 'type' => 'varchar', 'length' => 8, 'not null' => FALSE, 'default' => ''),
    'gps_lat' => array('description' => 'GPS-Koordinaten (Latitude)', 'type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => ''),
	  'gps_long' => array('description' => 'GPS-Koordinaten (Longitude)', 'type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => ''),
	),
	'primary key' => array('ADID'),
	'foreign keys' => array(
	  'Bezirk' => array('table' => 'aae_data_bezirk', 'columns' => array('bezirk' => 'BID'))
	),
  );
  $schema ['aae_data_event'] = array(
  'description' => 'Table for Events',
	'fields' => array(
	  'EID' => array('description' => 'ID für Events', 'type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
	  'name' => array('description' => 'Eventname', 'type' => 'varchar', 'length' => 64, 'not null' => FALSE),
	  'kurzbeschreibung' => array('description' => 'Kurze inhaltliche Erläuterung', 'type' => 'text', 'length' => 'medium', 'not null' => FALSE, 'default' => 0),
	  'bild' => array('description' => 'Pfad zum Foto', 'type' => 'varchar', 'length' => 500, 'not null' => FALSE, 'default' => ''),
	  'ort' => array('description' => 'Verweis auf Adresse', 'type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE, 'default' => 0),
	  'url' => array('description' => 'Link zur eigenen Homepage', 'type' => 'varchar', 'length' => 200, 'not null' => FALSE, 'default' => ''),
	  'ersteller' => array('description' => 'ID von User, der Event angelegt hat', 'type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE, 'default' => 0),
    'start_ts' => array( 'type' => 'datetime', 'mysql_type' => 'datetime', 'not null' => FALSE, 'description' => 'Startzeit des Events als Timestamp'),
    'ende_ts' => array( 'type' => 'datetime', 'mysql_type' => 'datetime', 'not null' => FALSE, 'description' => 'Endzeit des Events als Timestamp'),
    'parent_EID' => array( 'type' => 'varchar', 'length' => 5, 'not null' => FALSE, 'description' => 'NOT NULL if event recurres'),
    'recurring_event_type' => array( 'type' => 'varchar', 'length' => 1, 'not null' => FALSE, 'description' => '1: has children, 2: returns weekly, 3: returns 2-weekly, 4: returns monthly, 5: returns 2-monthly'),
    'created' => array( 'type' => 'datetime', 'mysql_type' => 'datetime', 'not null' => FALSE, 'description' => 'Created als Timestamp'),
    'modified' => array( 'type' => 'datetime', 'mysql_type' => 'datetime', 'not null' => FALSE, 'description' => 'Modified als Timestamp')
	),
	'primary key' => array('EID'),
	'foreign keys' => array(
	  'Eventadresse' => array('table' => 'aae_data_adresse', 'columns' => array('ort' => 'ADID')),
	  'User' => array('table' => 'user', 'columns' => array('ersteller' => 'uid'))
	),
  );
  $schema ['aae_data_akteur_hat_sparte'] = array(
  'description' => 'Hilfstabelle für Sparten/Zielgruppen',
	'fields' => array(
	  'hat_AID' => array('description' => 'ID für Akteur', 'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
	  'hat_KID' => array('description' => 'ID für Kategorien', 'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
	),
	'primary key' => array('hat_AID', 'hat_KID'),
	'foreign keys' => array(
	  'Kategorie' => array('table' => 'aae_data_kategorie', 'columns' => array('hat_KID' => 'KID')),
	  'Akteur' => array('table' => 'aae_data_akteur', 'columns' => array('hat_AID' => 'AID'))
	),
  );
  $schema ['aae_data_event_hat_sparte'] = array(
    'description' => 'Hilfstabelle für Sparten/Zielgruppen',
	'fields' => array(
	  'hat_EID' => array('description' => 'ID für Event', 'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
	  'hat_KID' => array('description' => 'ID für Kategorien', 'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
	),
	'primary key' => array('hat_EID', 'hat_KID'),
	'foreign keys' => array(
	  'Kategorie' => array('table' => 'aae_data_kategorie', 'columns' => array('hat_KID' => 'KID')),
	  'Event' => array('table' => 'aae_data_event', 'columns' => array('hat_EID' => 'EID'))
	),
  );
  $schema ['aae_data_sparte'] = array(
  'description' => 'Tabelle für Sparten/Zielgruppen',
	'fields' => array(
	  'KID' => array('description' => 'ID für Kategorien', 'type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE), /* TYPE: SERIAL?! RLY? */
	  'kategorie' => array('description' => 'Kategorie für Sparte oder Zielgruppe', 'type' => 'varchar', 'length' => 100, 'not null' => TRUE),
	),
	'primary key' => array('KID'),
  );
  $schema ['aae_data_akteur_hat_user'] = array(
  'description' => 'Hilfstabelle für Schreibrechte auf Akteursseiten',
	'fields' => array(
	  'hat_UID' => array('description' => 'ID für User', 'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
	  'hat_AID' => array('description' => 'ID für Akteure', 'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
	),
	'primary key' => array('hat_AID', 'hat_UID'),
	'foreign keys' => array(
	  'User' => array('table' => 'user', 'columns' => array('hat_UID' => 'UID')),
	  'Akteur' => array('table' => 'aae_data_akteur', 'columns' => array('hat_AID' => 'AID'))
	),
  );
  $schema ['aae_data_akteur_hat_event'] = array(
    'description' => 'Tabelle fuer Zuordnung aller Akteure zu einem Event',
	'fields' => array(
	  'EID' => array('description' => 'ID für Event', 'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
	  'AID' => array('description' => 'ID für Akteur', 'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
	),
	'primary key' => array('EID', 'AID'),
	'foreign keys' => array(
	  'Event' => array('table' => 'aae_data_event', 'columns' => array('EID' => 'EID')),
	  'Akteur' => array('table' => 'aae_data_akteur', 'columns' => array('AID' => 'AID'))
	),
  );

  return $schema;
}

/**
 * Implements hook_update_N().
 * Create a new database table aae_data_event_hat_sparte.
 */
function aae_data_update_7104() {
  $schema ['aae_data_event_hat_sparte'] = array(
  'description' => 'Hilfstabelle für Sparten/Zielgruppen',
	'fields' => array(
    'hat_EID' => array('description' => 'ID für Event', 'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
	  'hat_KID' => array('description' => 'ID für Kategorien', 'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
	),
	'primary key' => array('hat_EID', 'hat_KID'),
	'foreign keys' => array(
      'Kategorie' => array('table' => 'aae_data_kategorie', 'columns' => array('hat_KID' => 'KID')),
      'Event' => array('table' => 'aae_data_event', 'columns' => array('hat_EID' => 'EID'))
	),
  );

  db_create_table('aae_data_event_hat_sparte', $schema['aae_data_event_hat_sparte']);
}

/**
 * Implements hook_update_N().
 * Create fields for timestamp-data in tables aae_events & aae_akteure
 * Transfer start-& end-data as Timestamp into the new fields
 * Remove fields 'start', 'ende', 'zeit_von' & 'zeit_bis' in aae_events
 */

function aae_data_update_7105() {

 $newSchemaEvents = array(
  'start_ts' => array( 'type' => 'datetime', 'mysql_type' => 'datetime', 'not null' => FALSE, 'description' => 'Startzeit des Events als Timestamp'),
  'ende_ts' => array( 'type' => 'datetime', 'mysql_type' => 'datetime', 'not null' => FALSE, 'description' => 'Endzeit des Events als Timestamp'),
  'created' => array( 'type' => 'datetime', 'mysql_type' => 'datetime', 'not null' => FALSE, 'description' => 'Created als Timestamp'),
  'modified' => array( 'type' => 'datetime', 'mysql_type' => 'datetime', 'not null' => FALSE, 'description' => 'Modified als Timestamp')
 );

 $newSchemaAkteure = array(
  'barrierefrei' => array('description' => 'Barrierefreier Zugang?', 'type' => 'int', 'size' => 'tiny', 'not null' => FALSE),
  'created' => array( 'type' => 'datetime', 'mysql_type' => 'datetime', 'not null' => FALSE, 'description' => 'Created als Timestamp'),
  'modified' => array( 'type' => 'datetime', 'mysql_type' => 'datetime', 'not null' => FALSE, 'description' => 'Modified als Timestamp')
 );

 foreach ($newSchemaEvents as $key => $field)  {
    if (!db_field_exists('aae_data_event', $key)) {
      db_add_field('aae_data_event', $key, $field);
    }
  }

  foreach ($newSchemaAkteure as $key => $field)  {
     if (!db_field_exists('aae_data_akteur', $key)) {
       db_add_field('aae_data_akteur', $key, $field);
     }
   }


  $resultEvents = db_select('aae_data_event', 'e')
   ->fields('e')
   ->execute();

  foreach ($resultEvents as $event){
    $eStart = explode('-', trim($event->start));
    $eEnde  = explode('-', trim($event->ende));

    $eZeitVon = (empty(trim($event->zeit_von))) ? '00:00' : trim($event->zeit_von);
    $eZeitBis = (empty(trim($event->zeit_bis))) ? '00:00' : trim($event->zeit_bis);

    $eStart = $eStart[2].'-'.$eStart[1].'-'.$eStart[0].' '.$eZeitVon.':01';
    $eEnde = $eEnde[2].'-'.$eEnde[1].'-'.$eEnde[0].' '.$eZeitBis.':01';

    $eStart = (strlen($event->start) > 10 || empty(trim($event->start))) ? '1000-01-01 00:00:00' : $eStart;
    $eEnde = (strlen($event->ende) > 10 || empty(trim($event->ende))) ? '1000-01-01 00:00:00' : $eEnde;

    // Transfer strings into DB. Created becomes now().

    db_update('aae_data_event')
     ->fields(array(
      'start_ts' => $eStart,
      'ende_ts' => $eEnde,
      'created' => date('Y-m-d H:i:s', time())
     ))
     ->condition('EID', $event->EID)
     ->execute();
  }

  db_drop_field('aae_data_event', 'start');
  db_drop_field('aae_data_event', 'ende');
  db_drop_field('aae_data_event', 'zeit_von');
  db_drop_field('aae_data_event', 'zeit_bis');

}

/**
 * Implements hook_update_N().
 * Create menu-links for all given event- and akteure-profiles
 */

function aae_data_update_7106() {

 $akteure = db_select('aae_data_akteur', 'a')
  ->fields('a', array('AID', 'name'))
  ->execute()
  ->fetchAll();

 foreach ($akteure as $akteur) {

  $hasMenuItem = db_select('menu_links', 'ml')
   ->fields('ml')
   ->condition('menu_name', 'navigation')
   ->condition('link_path', 'akteurprofil/'.$akteur->AID)
   ->execute();

  if (!$hasMenuItem->rowCount()) {
   // Save menu-item "akteurprofil/ID"
   $parentItem = db_query(
    "SELECT menu_links.mlid
     FROM {menu_links} menu_links
     WHERE menu_name = :menu_name AND link_path = :link_path",
     array(":menu_name" => "navigation", ":link_path" => 'akteure'));

   $plid = $parentItem->fetchObject();

   $item = array(
    'menu_name' => 'navigation',
    'weight' => 1,
    'link_title' => t('Akteurprofil von !username', array('!username' => $akteur->name)),
    'module' => 'aae_data',
    'link_path' => 'akteurprofil/'.$akteur->AID,
    'plid' => $plid->mlid
   );

   menu_link_save($item);

  }
 }

 $events = db_select('aae_data_event', 'e')
  ->fields('e', array('EID', 'name'))
  ->execute()
  ->fetchAll();

  foreach ($events as $event) {

   $hasMenuItem = db_select('menu_links', 'ml')
    ->fields('ml')
    ->condition('menu_name', 'navigation')
    ->condition('link_path', 'eventprofil/'.$event->EID)
    ->execute();

   if (!$hasMenuItem->rowCount()) {
    // Save menu-item "eventprofil/ID"
    $parentItem = db_query(
     "SELECT menu_links.mlid
      FROM {menu_links} menu_links
      WHERE menu_name = :menu_name AND link_path = :link_path",
      array(":menu_name" => "navigation", ":link_path" => 'events'));

    $plid = $parentItem->fetchObject();

    $item = array(
     'menu_name' => 'navigation',
     'weight' => 1,
     'link_title' => t('Eventprofil von !username', array('!username' => $event->name)),
     'module' => 'aae_data',
     'link_path' => 'eventprofil/'.$event->EID,
     'plid' => $plid->mlid
    );

    menu_link_save($item);

   }
  }

  menu_cache_clear_all();

}


/**
 * Implements hook_update_N().
 * Divide geo-data into longitude and latitude, make events recurrable, clear
 * duplicates within database.
 */
function aae_data_update_7107() {

  // aae_install_clear_db_contents()

  $newSchemaAdresse = array(
    'gps_lat' => array('description' => 'GPS-Koordinaten (Latitude)', 'type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => ''),
    'gps_long' => array('description' => 'GPS-Koordinaten (Longitude)', 'type' => 'varchar', 'length' => 50, 'not null' => FALSE, 'default' => ''),
  );

  $newSchemaEvents = array(
    'parent_EID' => array( 'type' => 'varchar', 'length' => 5, 'not null' => FALSE, 'description' => 'Not NULL if event recurres'),
    'recurring_event_type' => array( 'type' => 'varchar', 'length' => 1, 'not null' => FALSE, 'description' => '1: has children, 2: returns weekly, 3: returns 2-weekly, 4: returns monthly, 5: returns 2-monthly'),
  );

  foreach ($newSchemaAdresse as $key => $field) {
     if (!db_field_exists('aae_data_adresse', $key)) {
       db_add_field('aae_data_adresse', $key, $field);
     }
   }

  foreach ($newSchemaEvents as $key => $field) {
     if (!db_field_exists('aae_data_event', $key)) {
       db_add_field('aae_data_event', $key, $field);
     }
   }

   $allAdressen = db_select('aae_data_adresse','ad')
    ->fields('ad', array('ADID', 'gps'));


   $allAdressen = $allAdressen->execute()->fetchAll();

   foreach ($allAdressen as $adresse) {

    if (!empty($adresse->gps)) {

    $gps = explode(',', $adresse->gps, 2);

    db_update('aae_data_adresse')
     ->fields(array(
      'gps_lat' => $gps[0],
      'gps_long' => $gps[1]
     ))
     ->condition('ADID', $adresse->ADID)
     ->execute();

    }
   }

  db_drop_field('aae_data_adresse', 'gps');
}

/**
 * Implements hook_install().
 * Wird bei Installation des Moduls ausgeführt, NACH hook_schema()
 */
function aae_data_install() {
  aae_install_insert_bezirke();
  if (module_exists('aggregator')) {
    aggregator_save_category(array('title' => 'aae-feeds', 'description' => 'Feeds integrated and being used by AAE-module'));
  }
}

/**
 * Implements hook_uninstall().
 * Wird bei Deinstallation des Moduls ausgeführt,
 * löscht alle Tabellen, die das Modul angelegt hat.
 */
function aae_data_uninstall() {
  drupal_uninstall_schema('aae_data');
  // remove e.g aggregator-items & -blocks
}

/**
 * Implements hook_disable().
 * Wird bei Deaktivierung des Moduls ausgeführt.
 */
function aae_data_disable() {
  //drupal_uninstall_schema('aae_data');
  //Deny access to API
}
