<?php

 $modulePath = drupal_get_path('module', 'aae_data');
 include_once $modulePath . '/aae_data_helper.php';

/*
* Implements hook_data_cron()
* Cronjob, der von Drupal automatisch aufgerufen wird.

function aae_data_cron() {
  //....
} */

function aae_data_user_login(&$edit, $account){
  drupal_set_message(t('Willkommen, <strong>!name</strong>!', array('!name'=>$account->name)));
}

function aae_data_simple_fb_connect_login($account){
  drupal_set_message(t('Willkommen, <strong>!name</strong>!', array('!name'=>$account->name)));
}

function aae_data_user_logout($account) {

  // Funktioniert nicht, weil Drupal Sessions löscht...workaround?!
  if (session_status() == PHP_SESSION_NONE) session_start();
  drupal_set_message(t('Ausgeloggt. Komm` bald wieder!'));
}

/**
 * Implements hook_block_info().
 * YET USELESS
 */

function aae_data_block_info() {

  $blocks['aae_footer_desc'] = array(
    'info' => 'Kurzer Intro-/Beschreibungstext für den Footer',
    'cache' => DRUPAL_NO_CACHE,
    'status' => TRUE,
    'region' => 'footer'
  );

  return $blocks;
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 * Improve the default "Invite"-block
 */

function aae_data_block_view_invite_invite_add_invite_by_email_alter(&$data, $bla) {
  //print_r($data['content']);
//exit();

  //  $data['content']['#entity']['und']['0']['#description'] = 'derda';

  return $data;
}

/*
 * Implements hook_default_message_type().
 */
function aae_data_default_message_type() {

  $defaults = array();

  $defaults['aae_message'] = entity_create('message_type', array(
   'description' => 'Activity messages from AAE-module',
   'argument_keys' => array(
     '!name',
     /*'!body',
     '@string',*/
    ),
    'message_text_format' => 'filtered_html',
    'message_text' => array(
      LANGUAGE_NONE => array(
        array('value' => '!name Example text.'),
      ),
    ),
    'language' => 'de',
    ));
/*
  $items['aaee_akteur_message'] = entity_create('message_type', '{
  "name" : "aaee_akteur_message",
  "description" : "bla",
  "module" : "aaejunge",
  "argument_keys" : [],
  "argument" : [],
  "category" : "message_type",
  "data" : {
    "token options" : { "clear" : 0 },
    "purge" : { "override" : 0, "enabled" : 0, "quota" : "", "days" : "" }
  },
  "language" : "de",
  "arguments" : null,
  "message_text" : { "de" : [
      {
        "value" : "\u003Cp\u003ETach, [current-user:uid]\u003C\/p\u003E\r\n",
        "format" : "filtered_html",
        "safe_value" : "\u003Cp\u003ETach, [current-user:uid]\u003C\/p\u003E\n"
      }
    ]
  }
}'); */

  return $defaults;

}

/**
 * Implements hook_akteur_created().
 */

function aae_data_akteur_created(){
  // doesn't work...
  echo 'd'; exit();

  $message = message_create('firstmessage', array(), 'bla');
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_published->set($account->status);
  $wrapper->save();

}

/**
 * Implements hook_block_view().
 * YET UNUSED
 */
function aae_data_block_view($delta = '', $bla) {

  $block = array();

  switch ($delta) {

    case 'aae_footer_desc':

     $block['content'] = '';
     break;
  }

  return $block;

}

/**
 * Implements hook_menu().
 *
 * Verlinkt URL-Pfade auf die entsprechende Funktion.
 */
function aae_data_menu() {

  $items = array();

  // The basic AAE-admin-page
  $items['admin/config/aae_data'] = array(
    'title' => t('AAE config interface'),
    'description' => t('Configure AAE module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('admin_form'),
    'access arguments' => array('access administration pages'),
    'weight' => 1
  );

  // AAE-admin-page "xy" (default)
  $items['admin/config/aae_data/settings'] = array(
    'title' => t('AAE config interface bla'),
    'description' => t('Configure AAE module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('admin_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 2
  );

  // AAE-admin-page "xy"
  $items['admin/config/aae_data/contents'] = array(
    'title' => t('AAE config interface'),
    'description' => t('Set and edit AAE-specific content, e.g. SEO-tags'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('admin_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3
  );

  //Menuitem "Akteure"
  $items['akteure'] = array(
    'title' => 'Akteure',
    'page callback' => 'akteure_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Akteurformular"
  $items['akteure/new'] = array(
    'title' => 'Akteurformular',
    'page callback' => 'akteurformular_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Akteurprofil"
  $items['akteurprofil/%'] = array(
    'title' => 'Akteurprofil',
    'page callback' => 'akteurprofil_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "ICS-Download"
  $items['akteurprofil/%/vcard_download'] = array(
    'title' => '',
    'page callback' => 'akteur_vcard_download',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Akteuredit"
  $items['akteurprofil/%/edit'] = array(
    'title' => t('Akteur bearbeiten'),
    'page callback' => 'akteuredit_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Akteurloeschen"
  $items['akteurprofil/%/remove'] = array(
    'title' => t('Akteur löschen'),
    'page callback' => 'akteurloeschen_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Events"
  $items['events'] = array(
    'title' => 'Events',
    'page callback' => 'events_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Eventformular"
  $items['events/new'] = array(
    'title' => 'Eventformular',
    'page callback' => 'eventformular_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Events/RSS"
  $items['events/rss'] = array(
    'title' => 'Events',
    'page callback' => 'events_rss',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Eventprofil"
  $items['eventprofil/%'] = array(
    'title' => '',
    'page callback' => 'eventprofil_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Eventprofil"
  $items['eventprofil/%/ics_download'] = array(
    'title' => '',
    'page callback' => 'event_ics_download',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Eventloeschen"
  $items['eventprofil/%/remove'] = array(
    'title' => t('Event löschen'),
    'page callback' => 'eventloeschen_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Eventedit"
  $items['eventprofil/%/edit'] = array(
    'title' => t('Event bearbeiten'),
    'page callback' => 'eventedit_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  // Fetch AJAX-requests
  $items['ajax/%'] = array(
    'title' => 'ajax request',
    'page callback' => 'ajax_requests',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'access callback' => TRUE,
  );

  return $items;
}


function admin_form() {

  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/aae_data.admin.inc';

  $form = build_admin_form();
  return system_settings_form($form);
}

/**
 * Logic behind the form submit.
 */
function admin_form_submit($form, $form_state) {
  // Kept it empty, intentionally.
}

/**
 * Gibt Event im .ical-Format aus
 */

function event_ics_download() {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/eventprofil.php';

  $ics = new aae_eventprofil();
  return $ics->ics_download();
}

/**
 * Gibt Akteursdaten im .vcf-Format aus ("VCard")
 */

function akteur_vcard_download() {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/akteurprofil.php';

  $vcard = new aae_akteurprofil();
  return $vcard->vcard_download();
}

/**
 * Baut die Seite fuer die Akteurliste
 */
function akteure_page() {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/akteure.php';

  $akteur = new akteure();
  return $akteur->run();
}

/**
 * Baut die Seite fuer das Akteurformular
 */
function akteurformular_page() {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/akteurformular.php';

  $akteur = new akteurformular();

  return $akteur->run();
}

/**
 * Baut die Seite fuer das Akteurprofil
 */
function akteurprofil_page() {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/akteurprofil.php';

  $akteurprofil = new aae_akteurprofil();

  return $akteurprofil->run();
}

/**
 * Baut die Seite fuer den Akteuredit
 */
function akteuredit_page($aid = 0) {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/akteurformular.php';

  $aae_akteur = new akteurformular('update');

  $path = current_path();
  $path_alias = drupal_lookup_path('alias', $path);

  return $aae_akteur->run();
}

/**
 * Baut die Seite fuer das Akteurloeschen
 */
function akteurloeschen_page($eid=0) {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/akteurprofil.php';

  $aae_akteur = new aae_akteurprofil();

  return $aae_akteur->removeAkteur();
}

/**
 * Baut die Seite fuer die Events
 */
function events_page() {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/events.php';

  $event = new events();
  return $event->run();
}

/**
 * Baut die Seite fuer die Events
 */
function events_rss() {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/events.php';

  $event = new events();
  return $event->rss();
}

/**
 * Baut die Seite fuer das Eventprofil
 */
function eventprofil_page() {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/eventprofil.php';

  $aae_event = new aae_eventprofil();

  return $aae_event->run();
}

/**
 * Baut die Seite fuer das Eventloeschen
 */
function eventloeschen_page($eid = 0) {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/eventprofil.php';

  $aae_event = new aae_eventprofil();
  return $aae_event->removeEvent();
}

/**
 * Baut die Seite fuer das Eventedit
 */
function eventedit_page($aid = 0) {

  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/eventformular.php';

  $event = new eventformular('update');

  $path = current_path();
  $path_alias = drupal_lookup_path('alias', $path);

  return $event->run();
}

/**
 * Baut die Seite fuer das Eventformular
 */
function eventformular_page() {

  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/eventformular.php';

  $event = new eventformular();

  $path = current_path();
  $path_alias = drupal_lookup_path('alias', $path);

  return $event->run();
}

/**
 * Gibt ajax-request's an entsprechende Klasse/Funktion weiter
 */

function ajax_requests($id) {

  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/aae_data_ajax_requests.php';

  $request = new aae_data_ajax_requests();

  $path = current_path();
  $explodedpath = explode("/", $path);
  $function_called = $request->clearContent($explodedpath[1]);

  switch($function_called) {

   case ('getAkteurKontakt') :
    $request->getAkteurKontakt($id);
   break;

   case ('getAkteurAdresse') :
    $request->getAkteurAdresse($id);
   break;

   case ('getKalender') :
    $request->getKalender();
   break;

   default :
    // U mad? Unbekannter Funktionsaufruf, weg damit...
    exit();
   break;

  }
 }

/**
 * Funktion zum Einlesen aller Stadtteile
 * Wird einmalig aufgerufen in aae_data_install.php
 */
function aae_install_insert_bezirke() {
  $bezirke = array(
    'Zentrum (Mitte)',
    'Zentrum-Ost (Mitte)',
    'Zentrum-Südost (Mitte)',
    'Seeburgviertel (Mitte)',
    'Zentrum-Süd (Mitte)',
    'Musikviertel (Mitte)',
    'Zentrum-West (Mitte)',
    'Bachviertel (Mitte)',
    'Zentrum-Nordwest (Mitte)',
    'Waldstraßenviertel (Mitte)',
    'Zentrum-Nord (Mitte)',
    'Schönefeld-Abtnaundorf (Nordost)',
    'Schönefeld-Ost (Nordost)',
    'Schönefeld (Nordost)',
    'Mockau-Süd (Nordost)',
    'Mockau-Nord (Nordost)',
    'Mockau (Nordost)',
    'Thekla (Nordost)',
    'Plaußig-Portitz (Nordost)',
    'Neustadt-Neuschönefeld (Ost)',
    'Volkmarsdorf (Ost)',
    'Anger-Crottendorf (Ost)',
    'Sellerhausen-Stünz (Ost)',
    'Paunsdorf (Ost)',
    'Heiterblick (Ost)',
    'Mölkau (Ost)',
    'Engelsdorf (Ost)',
    'Baalsdorf (Ost)',
    'Althen-Kleinpösna (Ost)',
    'Reudnitz-Thonberg (Südost)',
    'Stötteritz (Südost)',
    'Probstheida (Südost)',
    'Meusdorf (Südost)',
    'Liebertwolkwitz (Südost)',
    'Holzhausen (Südost)',
    'Südvorstadt (Süd)',
    'Connewitz (Süd)',
    'Marienbrunn (Süd)',
    'Lößnig (Süd)',
    'Dölitz-Dösen (Süd)',
    'Schleußig (Südwest)',
    'Plagwitz (Südwest)',
    'Kleinzschocher (Südwest)',
    'Großzschocher (Südwest)',
    'Knautkleeberg-Knauthain (Südwest)',
    'Hartmannsdorf-Knautnaundorf (Südwest)',
    'Schönau (West)',
    'Grünau-Ost (West)',
    'Grünau-Mitte (West)',
    'Grünau-Siedlung (West)',
    'Lausen-Grünau (West)',
    'Grünau-Nord (West)',
    'Grünau (West)',
    'Miltitz (West)',
    'Lindenau (Alt-West)',
    'Altlindenau (Alt-West)',
    'Neulindenau (Alt-West)',
    'Leutzsch (Alt-West)',
    'Böhlitz-Ehrenberg (Alt-West)',
    'Burghausen-Rückmarsdorf (Alt-West)',
    'Möckern (Nordwest)',
    'Wahren (Nordwest)',
    'Lützschena-Stahmeln (Nordwest)',
    'Lindenthal (Nordwest)',
    'Gohlis-Süd (Nord)',
    'Gohlis-Mitte (Nord)',
    'Gohlis-Nord (Nord)',
    'Gohlis (Nord)',
    'Eutritzsch (Nord)',
    'Seehausen (Nord)',
    'Wiederitzsch (Nord)',
  );

  $i = 0;
  while ($i < count($bezirke)) {
	 $insert_bezirke = db_insert('aae_data_bezirke')
    ->fields(array('bezirksname' => $bezirke[$i]))
	  ->execute();
	 $i++;
  }
  return $insert_bezirke;
}
