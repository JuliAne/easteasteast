<?php

 $modulePath = drupal_get_path('module', 'aae_data');
 include_once $modulePath . '/aae_data_helper.php';
 
/*
* Implements hook_data_cron()
* Cronjob, der von Drupal automatisch aufgerufen wird.
*/
function aae_data_cron() {
  aae_data_refresh_recurring_events();
  #aae_data_refresh_facebook_events();
  #aae_install_clear_db_contents();
}

function aae_data_user_login(&$edit, $account){
  drupal_set_message(t('Willkommen, <strong>!name</strong>!', array('!name'=>$account->name)));
}

function aae_data_simple_fb_connect_login($account){
  aae_data_user_login();
}

function aae_data_user_logout($account) {
  // Funktioniert nicht, weil Drupal Sessions löscht...workaround?!
  if (session_status() == PHP_SESSION_NONE) session_start();
  drupal_set_message(t('Ausgeloggt. Komm` bald wieder!'));
}

/**
 * Implements hook_block_info().
 * Make AAE-custom blocks available.
 */
function aae_data_block_info() {
  
  $blocks['aae_festival_neustadt'] = array(
    'info' => 'Alle Events eines Festivals',
    'cache' => DRUPAL_NO_CACHE,
    'status' => TRUE,
    /*'region' => 'content'*/
  );  

  $blocks['aae_journal'] = array(
    'info' => 'Latest blog-posts. Called on start- and journal-page (see theme).',
    'cache' => DRUPAL_NO_CACHE,
    'status' => TRUE,
    'region' => 'journal_latest_posts'
  );

  $blocks['aae_footer_desc'] = array(
    'info' => 'Short intro-/descriptions-text for the footer',
    'cache' => DRUPAL_NO_CACHE,
    'status' => TRUE,
    'region' => 'footer'
  );

  return $blocks;
}

/*
 * Implements hook_default_message_type().
 */
function aae_data_default_message_type() {

  $defaults = array();

  $defaults['aae_message'] = entity_create('message_type', array(
   'description' => 'Activity messages from AAE-module',
   'argument_keys' => array(
     '!name',
     /*'!body',
     '@string',*/
    ),
    'message_text_format' => 'filtered_html',
    'message_text' => array(
      LANGUAGE_NONE => array(
        array('value' => '!name Example text.'),
      ),
    ),
    'language' => 'de',
    ));
/*
  $items['aaee_akteur_message'] = entity_create('message_type', '{
  "name" : "aaee_akteur_message",
  "description" : "bla",
  "module" : "aaejunge",
  "argument_keys" : [],
  "argument" : [],
  "category" : "message_type",
  "data" : {
    "token options" : { "clear" : 0 },
    "purge" : { "override" : 0, "enabled" : 0, "quota" : "", "days" : "" }
  },
  "language" : "de",
  "arguments" : null,
  "message_text" : { "de" : [
      {
        "value" : "\u003Cp\u003ETach, [current-user:uid]\u003C\/p\u003E\r\n",
        "format" : "filtered_html",
        "safe_value" : "\u003Cp\u003ETach, [current-user:uid]\u003C\/p\u003E\n"
      }
    ]
  }
}'); */

  return $defaults;

}

/**
 * Implements hook_akteur_created().
 */

function aae_data_akteur_created(){
  // doesn't work... maybe call hook_akteur...?!
  #echo 'd'; exit();

  $message = message_create('firstmessage', array(), 'bla');
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_published->set($account->status);
  $wrapper->save();

}

/**
 * Implements hook_block_view().
 */
function aae_data_block_view($delta = '') {

  $block = array();

  switch ($delta) {
    
    case 'aae_festival_neustadt' :
     $block['content'] = events_page(true);

    case 'aae_footer_desc':

     $block['content'] = ''; // TODO fill with data from AAE-backend
     break;

    case 'aae_journal':

     $nodes = Drupal\AaeData\aae_data_helper::getJournalEntries(3);
     $block['content'] = Drupal\AaeData\aae_data_helper::render('/templates/journal_latest_posts.tpl.php', array('nodes' => $nodes));
     break;
  }

  return $block;

}

/**
 * Implements hook_menu().
 *
 * Verlinkt URL-Pfade auf die entsprechende Funktion.
 */
function aae_data_menu() {

  $items = array();

  // The basic AAE-admin-page
  $items['admin/config/aae_data'] = array(
    'title' => t('AAE config interface'),
    'description' => t('Configure AAE module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('admin_form'),
    'access arguments' => array('access administration pages'),
    'weight' => 1
  );

  // AAE-admin-page "xy" (default)
  $items['admin/config/aae_data/settings'] = array(
    'title' => t('AAE config interface bla'),
    'description' => t('Configure AAE module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('admin_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 2
  );

  // AAE-admin-page "xy"
  $items['admin/config/aae_data/contents'] = array(
    'title' => t('AAE config interface'),
    'description' => t('Set and edit AAE-specific content, e.g. SEO-tags'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('admin_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3
  );

  //Menuitem "Akteure"
  $items['akteure'] = array(
    'title' => 'Akteure',
    'page callback' => 'akteure_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Akteurformular"
  $items['akteure/new'] = array(
    'title' => 'Akteurformular',
    'page callback' => 'akteurformular_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Akteurprofil"
  $items['akteurprofil/%'] = array(
    'title' => 'Akteurprofil',
    'page callback' => 'akteurprofil_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "ICS-Download"
  $items['akteurprofil/%/vcard_download'] = array(
    'title' => '',
    'page callback' => 'akteur_vcard_download',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Akteuredit"
  $items['akteurprofil/%/edit'] = array(
    'title' => t('Akteur bearbeiten'),
    'page callback' => 'akteuredit_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Akteurloeschen"
  $items['akteurprofil/%/remove'] = array(
    'title' => t('Akteur löschen'),
    'page callback' => 'akteurloeschen_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );
  
  //Menuitem "Events"
  $items['events'] = array(
    'title' => t('Events'),
    'page callback' => 'events_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Eventformular"
  $items['events/new'] = array(
    'title' => t('Eventformular'),
    'page callback' => 'eventformular_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Events/RSS"
  $items['events/rss'] = array(
    'title' => t('Events RSS-Feed'),
    'page callback' => 'events_rss',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Eventprofil"
  $items['eventprofil/%'] = array(
    'title' => '',
    'page callback' => 'eventprofil_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Eventprofil"
  $items['eventprofil/%/ics_download'] = array(
    'title' => '',
    'page callback' => 'event_ics_download',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Eventloeschen"
  $items['eventprofil/%/remove'] = array(
    'title' => t('Event löschen'),
    'page callback' => 'eventloeschen_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  //Menuitem "Eventedit"
  $items['eventprofil/%/edit'] = array(
    'title' => t('Event bearbeiten'),
    'page callback' => 'eventedit_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );
  
  //Admin-item "Add festival"
  $items['festivals/new'] = array(
    'title' => t('Festivalformular'),
    'page callback' => 'festivalformular_page',
    'access arguments' => array('access content'),
  #  EDIT
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );
  
  //Admin-item "festivaledit"
  $items['festivals/%/edit'] = array(
    'title' => t('Festival bearbeiten'),
    'page callback' => 'festivaledit_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  // Fetch AJAX-requests
  $items['ajax/%'] = array(
    'title' => 'ajax request',
    'page callback' => 'ajax_requests',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'access callback' => TRUE,
  );

  return $items;
}


function admin_form() {

  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/aae_data.admin.inc';

  $form = build_admin_form();
  return system_settings_form($form);
}

/**
 * Logic behind the form submit.
 */
function admin_form_submit($form, $form_state) {
  // Kept it empty, intentionally.
}

/**
 * Gibt Event im .ical-Format aus
 */

function event_ics_download() {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/eventprofil.php';

  $ics = new Drupal\AaeData\eventprofil();
  return $ics->ics_download();
}

/**
 * Gibt Akteursdaten im .vcf-Format aus ("VCard")
 */

function akteur_vcard_download() {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/akteurprofil.php';

  $vcard = new Drupal\AaeData\akteurprofil();
  return $vcard->vcard_download();
}

/**
 * Baut die Seite fuer die Akteurliste
 */
function akteure_page() {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/akteurepage.php';

  $akteur = new Drupal\AaeData\akteurepage();
  return $akteur->run();
}

/**
 * Baut die Seite fuer das Akteurformular
 */
function akteurformular_page() {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/akteurformular.php';

  $akteur = new Drupal\AaeData\akteurformular();

  return $akteur->run();
}

/**
 * Baut die Seite fuer das Akteurprofil
 */
function akteurprofil_page() {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/akteurprofil.php';

  $akteurprofil = new Drupal\AaeData\akteurprofil();

  return $akteurprofil->run();
}

/**
 * Baut die Seite fuer den Akteuredit
 */
function akteuredit_page($aid = 0) {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/akteurformular.php';

  $aae_akteur = new Drupal\AaeData\akteurformular('update');

  $path = current_path();
  $path_alias = drupal_lookup_path('alias', $path);

  return $aae_akteur->run();
}

/**
 * Baut die Seite fuer das Akteurloeschen
 */
function akteurloeschen_page($eid=0) {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/akteurprofil.php';

  $aae_akteur = new Drupal\AaeData\akteurprofil();

  return $aae_akteur->removeAkteur();
}

/* Festivals */
function festivalformular_page($fid=0){
   $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/festivalformular.php';

  $aae_akteur = new Drupal\AaeData\festivalformular();

  $path = current_path();
  $path_alias = drupal_lookup_path('alias', $path);

  return $aae_akteur->run();
}

function festivaledit_page($fid=0){
   $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/festivalformular.php';

  $aae_akteur = new Drupal\AaeData\festivalformular('update');

  return $aae_akteur->run();
}

/**
 * Baut die Seite fuer die Events
 */
function events_page($isBlock = false) {
  
  $modulePath = drupal_get_path('module', 'aae_data');
  include_once $modulePath . '/eventspage.php';
  
  $event = new Drupal\AaeData\eventspage((!is_bool($isBlock)) ? false : $isBlock);
  return $event->run();
}

/**
 * Baut die Seite fuer den Events-RSS-Feed
 */
function events_rss() {
  $modulePath = drupal_get_path('module', 'aae_data');
  include_once $modulePath . '/eventspage.php';

  $event = new Drupal\AaeData\eventspage();
  return $event->rss();
}

/**
 * Baut die Seite fuer das Eventprofil
 */
function eventprofil_page() {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/eventprofil.php';

  $aae_event = new Drupal\AaeData\eventprofil();

  return $aae_event->run();
}

/**
 * Baut die Seite fuer das Eventloeschen
 */
function eventloeschen_page($eid = 0) {
  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/eventprofil.php';

  $aae_event = new Drupal\AaeData\eventprofil();
  return $aae_event->removeEvent();
}

/**
 * Baut die Seite fuer das Eventedit
 */
function eventedit_page($aid = 0) {

  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/eventformular.php';

  $event = new Drupal\AaeData\eventformular('update');

  $path = current_path(); #kann raus
  $path_alias = drupal_lookup_path('alias', $path); #kann raus

  return $event->run();
}

/**
 * Baut die Seite fuer das Eventformular
 */
function eventformular_page() {

  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/eventformular.php';

  $event = new Drupal\AaeData\eventformular();

  $path = current_path();
  $path_alias = drupal_lookup_path('alias', $path);

  return $event->run();
}

/**
 * Gibt ajax-request's an entsprechende Klasse/Funktion weiter
 */

function ajax_requests($id) {

  $modulePath = drupal_get_path('module', 'aae_data');
  include $modulePath . '/aae_data_ajax_requests.php';

  $request = new Drupal\AaeData\aae_data_ajax_requests();

  $path = current_path();
  $explodedpath = explode("/", $path);
  $function_called = $request->clearContent($explodedpath[1]);

  switch($function_called) {

   case ('getAkteurKontakt') :
    $request->getAkteurKontakt($id);
   break;

   case ('getAkteurAdresse') :
    $request->getAkteurAdresse($id);
   break;

   case ('getKalender') :
    $request->getKalender();
   break;
   
   case ('removeEventChildren') :
    $request->removeEventChildren($id);
   break;

   default :
    // U mad? Unbekannter Funktionsaufruf, weg damit...
    drupal_add_http_header('Content-Type', 'application/json');
    echo '{"error" : "Unknown AJAX method"}';
    exit();
   break;

  }
 }

/**
 * Funktion zum Vereinheitlichen der DB-Bestände
 */
function aae_install_clear_db_contents() {
  
 $aae = new \Drupal\AaeData\aae_data_helper();
   
 // Unify Akteure-URL's and -numbers
 $akteure = db_select($aae->tbl_akteur, 'a')
  ->fields('a', array('AID', 'url', 'telefon'))
  ->execute();
  
 foreach ($akteure->fetchAll() as $akteur){
   
  if (strpos($akteur->url, 'http') === false && strpos($akteur->url, 'https') === false) { 
   db_update($aae->tbl_akteur)
    ->fields(array(
     'url' => 'http://'.$akteur->url
    ))
    ->condition('AID', $akteur->AID)
    ->execute();
  }
  
  db_update($aae->tbl_akteur)
   ->fields(array(
    'telefon' => str_replace(" ", "", str_replace("---", "", str_replace("/", "-", $akteur->telefon)))
   ))
   ->condition('AID', $akteur->AID)
   ->execute();
  
 }
 
 // Make "str." to "straße" & "ss" to "ß"
 $adressen = db_select($aae->tbl_adresse, 'a')
  ->fields('a')
  ->execute();
 
 foreach ($adressen->fetchAll() as $adresse){
  if (strpos($adresse->strasse, 'str.')){
   db_update($aae->tbl_adresse)
    ->fields(array(
     'strasse' => str_replace('str.','straße',$adresse->strasse)
    ))
    ->condition('ADID', $adresse->ADID)->execute();
  }
  if (strpos($adresse->strasse, 'strasse')){
   db_update($aae->tbl_adresse)
    ->fields(array(
     'strasse' => str_replace('strasse','straße',$adresse->strasse)
    ))
    ->condition('ADID', $adresse->ADID)->execute();
  }
 }

 // Remove double tags for Events & Akteure
 $allTags = db_select($aae->tbl_sparte, 's')
  ->fields('s')
  ->execute();
  
 $tags = array();  
  
 foreach ($allTags->fetchAll() as $tag){
   
   if (isset($tags[$tag->kategorie])) {
    
    // akteure_tags
    // Avoid PDOException
    $availTags = db_select($aae->tbl_hat_sparte, 'hs')
     ->fields('hs')
     ->condition('hat_KID', $tag->KID)
     ->execute();
     
    foreach ($availTags->fetchAll() as $aTag) {
     if (!db_select($aae->tbl_hat_sparte,'hs')->fields('hs')->condition('hat_AID',$aTag->hat_AID)->condition('hat_KID',$tags[$tag->kategorie])->execute()->rowCount()){
      db_update($aae->tbl_hat_sparte)
       ->fields(array(
       'hat_KID' => $tags[$tag->kategorie]
       ))
       ->condition('hat_KID', $tag->KID)
       ->execute();
     }
    }
     
    // events_tags
    // Avoid PDOException
    $availTags = db_select($aae->tbl_event_sparte, 'es')
     ->fields('es')
     ->condition('hat_KID', $tag->KID)
     ->execute();
    
    foreach ($availTags->fetchAll() as $aTag) {
     if (!db_select($aae->tbl_event_sparte,'es')->fields('es')->condition('hat_EID',$aTag->hat_EID)->condition('hat_KID',$tags[$tag->kategorie])->execute()->rowCount()){
      db_update($aae->tbl_event_sparte)
       ->fields(array(
       'hat_KID' => $tags[$tag->kategorie]
       ))
       ->condition('hat_KID', $tag->KID)
       ->execute();
     }
    }
     
    db_delete($aae->tbl_sparte)
     ->condition('KID', $tag->KID)
     ->execute();
    
   } else {
 
    $tags[$tag->kategorie] = $tag->KID;
   
  } 
 }
}

/**
 * Called by aae_data_cronjob()
 *
 * Checks each recurring event (that has passed) for more dates
 * that have passed and adds up to 5 new sub-event-dates.
 * TODO: Nutze Anpassungen an tbl-events-termine, um einzeln gelöschte
 * Termine zu berücksichtigen.
 */
function aae_data_refresh_recurring_events(){
  
  require_once('models/events.php');
  $events = new \Drupal\AaeData\events();
  
  // Get all event parents
  $eParents = $events->getEvents(array(
   'start' => (new \DateTime(date()))->format('Y.m.d H:i:s'),
   [] => array(
    'key' => 'recurring_event_type',
    'condition' => '2',
    'operator' => '>='
   ),
   [] => array(
    'key' => 'parent_EID',
    'condition' => '',
    'operator' => '='
   ),
   [] => array(
     'key' => 'recurring_event_type',
     'condition' => '6',
     'operator' => '<'
   ),
   [] => array(
    'key' => 'event_recurres_till',
    'condition' => date('Y.m.d H:i:s'),
    'operator' => '>='
   )
  ), 'minimal');
  
  $countAddedEvents = 0;
  
  foreach ($eParents as $eParent){
    
   // Get all children of event that will occur in future
   $eChildren = $events->getEvents(array(
    'parent_EID' => $eParent->EID,
    'start' => date('Y.m.d H:i:s')
   ), 'minimal');
   
   $newChildren = 1; // Parent-element
   if (count($eChildren) < 5){
    $newChildren = 1 + (5-count($eChildren));
   }
   
   for ($i=0;$i==$newChildren;$i++){
    $events->addEventChildren($eParent->EID, $eParent->recurring_event_type, end($eChildren->start_ts), end($eChildren->ende_ts));
    $countAddedEvents++;
   }
  }
  
  if ($countAddedEvents >= 1){
   // Some humanoid debugging, to be removed
   $msg = "Der Aae-Data-Cron wurde aufgerufen und hat ".$countAddedEvents." neue Events erstellt".
   mail('info@leipziger-ecken.de', 'AAE DATA Debugger', $msg);
  }
      
    
    // TODO: Reset event-title to next date
    /*
        // Tell Drupal about the new eventprofil/ID-item
    $parentItem = db_query(
     "SELECT menu_links.mlid
      FROM {menu_links} menu_links
      WHERE menu_name = :menu_name AND link_path = :link_path",
      array(":menu_name" => "navigation", ":link_path" => 'events'));

    $plid = $parentItem->fetchObject();

    $item = array(
     'menu_name' => 'navigation',
     'weight' => 1,
     'link_title' => t('Event "!name" am !datum in !ort, Leipzig', array('!name' => $this->name, '!datum' => ,'!ort' => $this->ort)),
     'module' => 'aae_data',
     'link_path' => 'eventprofil/'.$this->event_id,
     'plid' => $plid->mlid
    );

    menu_link_save($item);

    // Call hooks
    module_invoke_all('hook_event_created'); */
    

 # }
}
  
/*
 * Implements hook_libraries_info().
 
function aae_data_libraries_info() {
  $libraries['facebook-php-sdk-v4'] = array(
    'name' => 'Facebook PHP SDK v4',
    'vendor url' => 'https://github.com/facebook/facebook-php-sdk-v4',
    'download url' => 'https://github.com/facebook/facebook-php-sdk-v4/releases',
    'version arguments' => array(
      'file' => 'README.md',
      // pattern to search for: Stable-4.0.23
      'pattern' => '@Stable-(\d*\.\d*\.\d*)@'
    ),
    'xautoload' => function($adapter) {
      $adapter->add('Facebook', 'src');
    },
  );
  return $libraries;
} */

function aae_data_refresh_facebook_events(){
  /*
 use Facebook\FacebookSession;
use Facebook\FacebookRedirectLoginHelper;
use Facebook\FacebookSDKException;
use Facebook\FacebookRequest;
use Facebook\FacebookRequestException;
use Facebook\GraphObject;

  $login_helper = new FacebookRedirectLoginHelper($return_url);


 */
} 

/**
 * Funktion zum Einlesen aller Stadtteile
 * Wird einmalig aufgerufen in aae_data_install.php
 */
function aae_install_insert_bezirke() {
  $bezirke = array(
    'Zentrum (Mitte)',
    'Zentrum-Ost (Mitte)',
    'Zentrum-Südost (Mitte)',
    'Seeburgviertel (Mitte)',
    'Zentrum-Süd (Mitte)',
    'Musikviertel (Mitte)',
    'Zentrum-West (Mitte)',
    'Bachviertel (Mitte)',
    'Zentrum-Nordwest (Mitte)',
    'Waldstraßenviertel (Mitte)',
    'Zentrum-Nord (Mitte)',
    'Schönefeld-Abtnaundorf (Nordost)',
    'Schönefeld-Ost (Nordost)',
    'Schönefeld (Nordost)',
    'Mockau-Süd (Nordost)',
    'Mockau-Nord (Nordost)',
    'Mockau (Nordost)',
    'Thekla (Nordost)',
    'Plaußig-Portitz (Nordost)',
    'Neustadt-Neuschönefeld (Ost)',
    'Volkmarsdorf (Ost)',
    'Anger-Crottendorf (Ost)',
    'Sellerhausen-Stünz (Ost)',
    'Paunsdorf (Ost)',
    'Heiterblick (Ost)',
    'Mölkau (Ost)',
    'Engelsdorf (Ost)',
    'Baalsdorf (Ost)',
    'Althen-Kleinpösna (Ost)',
    'Reudnitz-Thonberg (Südost)',
    'Stötteritz (Südost)',
    'Probstheida (Südost)',
    'Meusdorf (Südost)',
    'Liebertwolkwitz (Südost)',
    'Holzhausen (Südost)',
    'Südvorstadt (Süd)',
    'Connewitz (Süd)',
    'Marienbrunn (Süd)',
    'Lößnig (Süd)',
    'Dölitz-Dösen (Süd)',
    'Schleußig (Südwest)',
    'Plagwitz (Südwest)',
    'Kleinzschocher (Südwest)',
    'Großzschocher (Südwest)',
    'Knautkleeberg-Knauthain (Südwest)',
    'Hartmannsdorf-Knautnaundorf (Südwest)',
    'Schönau (West)',
    'Grünau-Ost (West)',
    'Grünau-Mitte (West)',
    'Grünau-Siedlung (West)',
    'Lausen-Grünau (West)',
    'Grünau-Nord (West)',
    'Grünau (West)',
    'Miltitz (West)',
    'Lindenau (Alt-West)',
    'Altlindenau (Alt-West)',
    'Neulindenau (Alt-West)',
    'Leutzsch (Alt-West)',
    'Böhlitz-Ehrenberg (Alt-West)',
    'Burghausen-Rückmarsdorf (Alt-West)',
    'Möckern (Nordwest)',
    'Wahren (Nordwest)',
    'Lützschena-Stahmeln (Nordwest)',
    'Lindenthal (Nordwest)',
    'Gohlis-Süd (Nord)',
    'Gohlis-Mitte (Nord)',
    'Gohlis-Nord (Nord)',
    'Gohlis (Nord)',
    'Eutritzsch (Nord)',
    'Seehausen (Nord)',
    'Wiederitzsch (Nord)',
    'Stadtweit'
  );

  $i = 0;
  while ($i < count($bezirke)) {
	 $insert_bezirke = db_insert('aae_data_bezirke')
    ->fields(array('bezirksname' => $bezirke[$i]))
	  ->execute();
	 $i++;
  }
  return $insert_bezirke;
}
